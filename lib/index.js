// Generated by CoffeeScript 1.3.3
var db, follow, freeway, http, https, log, nconf, opts, pin, request, start, updateSettings,
  _this = this,
  __hasProp = {}.hasOwnProperty;

log = console.log;

pin = require('linchpin');

https = require('https');

http = require('http');

follow = require('follow');

request = require('request');

nconf = require('nconf');

nconf.env().file({
  file: "./config.json"
});

db = nconf.get('datastore');

freeway = require('nano')(db);

follow = require('follow');

opts = {};

start = function(port) {
  var server,
    _this = this;
  server = https.createServer(opts, function(req, res) {
    var dest, method, target, xtoken, _ref;
    req.on('error', function(e) {
      res.writeHead(500, {
        'content-type': 'text/plain'
      });
      res.end("Could not connect to " + target);
      return log(e.message);
    });
    method = req.method.toLowerCase();
    target = nconf.get('default');
    xtoken = req != null ? req.headers['x-token'] : void 0;
    if ((xtoken != null) && nconf.get('tokens').indexOf(xtoken) >= 0) {
      target = (_ref = req.headers) != null ? _ref.host : void 0;
    }
    dest = request[method](target + req.url);
    dest.on('error', function(e) {
      var msg;
      msg = "ERROR: Could not connect to " + target + " because " + e.message;
      log(msg);
      res.writeHead(500, {
        'content-type': 'text/plain'
      });
      return res.end(msg);
    });
    log("Bounced to " + target + " on " + ((new Date()).toString()));
    return req.pipe(dest.pipe(res));
  });
  server.on("error", function(err) {
    return log(err.message);
  });
  return server.listen(port);
};

follow({
  db: db
}, function(e, change) {
  if (e) {
    return log(e);
  }
  if (change.id === 'settings') {
    return updateSettings();
  }
});

updateSettings = function() {
  var _this = this;
  return freeway.get('settings', function(e, settings) {
    var k, v;
    if (e) {
      return log(e);
    }
    for (k in settings) {
      if (!__hasProp.call(settings, k)) continue;
      v = settings[k];
      if (k[0] !== '_') {
        nconf.set(k, v);
      }
    }
    pin.emit('settings:loaded');
    return log('Updated Settings from CouchDb.....');
  });
};

pin.on('getKEY', function() {
  return freeway.attachment.get('settings', nconf.get('key'), function(err, key) {
    if (err != null) {
      return log(err);
    }
    opts.key = key.toString();
    return pin.emit('getCERT');
  });
});

pin.on('getCERT', function() {
  return freeway.attachment.get('settings', nconf.get('cert'), function(err, cert) {
    if (err != null) {
      return log(err);
    }
    opts.cert = cert.toString();
    return pin.emit('LOADED', null);
  });
});

module.exports = function(port) {
  pin.once('LOADED', function(err) {
    log("Starting server on port " + port + "...");
    return start(port);
  });
  updateSettings();
  return pin.once('settings:loaded', function() {
    pin.emit('getKEY');
    log('Welcome to Freeway v 1.0.0alpha7');
    return log('Initializing...');
  });
};
